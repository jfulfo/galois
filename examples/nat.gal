// church nat
def ctrue(x, y) {
    x
}

def cfalse(x, y) {
    y
}

def zero(f, x) {
    x
}

def is_zero(n) {
    def always_false(x) {
        cfalse
    }
    n(always_false, ctrue)
}

def succ(n) {
    def succ_inner(f, x) {
        f(n(f, x))
    }
    succ_inner
}

def add(m, n) {
    n(succ, m)
}

notation "$x + $y" with x, y precedence 10 associativity left := add(x, y)

def mult(m, n) {
    n(add(m, zero), zero)
}

notation "$x * $y" with x, y precedence 20 associativity left := mult(x, y)

def one() {
    return succ(zero)
}

def two() {
    return succ(one())
}

def three() {
    return succ(two())
}

def id(x) {
    x
}

def pair(a, b) {
    def pair_inner(f) {
        f(a, b)
    }
    pair_inner
}

def first(p) {
    p(ctrue)
}

def second(p) {
    p(cfalse)
}

def pred(n) {
    def pred_inner(f, x) {
        def g(p) {
            pair(f(first(p)), first(p))
        }
        second(n(g, pair(x, x)))
    }
    pred_inner
}

def minus(m, n) { // m - n
    return n(pred, m)
}

notation "$x - $y" with x, y precedence 10 associativity left := minus(x, y)


x = one()
y = two()
z = x + y
w = three()
res = z - w
is_zero(res)
