// church nat
fun ctrue(x, y) {
    x
}

fun cfalse(x, y) {
    y
}

fun zero(f, x) {
    x
}

fun is_zero(n) {
    fun always_false(x) {
        cfalse
    }
    n(always_false, ctrue)
}

fun succ(n) {
    fun succ_inner(f, x) {
        f(n(f, x))
    }
    succ_inner
}

fun add(m, n) {
    n(succ, m)
}


fun mult(m, n) {
    n(add(m, zero), zero)
}


fun one() {
    return succ(zero)
}

fun two() {
    return succ(one())
}

fun three() {
    return succ(two())
}

fun id(x) {
    x
}

fun pair(a, b) {
    fun pair_inner(f) {
        f(a, b)
    }
    pair_inner
}

fun first(p) {
    p(ctrue)
}

fun second(p) {
    p(cfalse)
}

fun pred(n) {
    fun pred_inner(f, x) {
        fun g(p) {
            pair(f(first(p)), first(p))
        }
        second(n(g, pair(x, x)))
    }
    pred_inner
}

fun minus(m, n) { // m - n
    return n(pred, m)
}

notation "$x + $y" with x, y precedence 10 associativity left := add(x, y)
notation "$x * $y" with x, y precedence 20 associativity left := mult(x, y)
notation "$x - $y" with x, y precedence 10 associativity left := minus(x, y)

z = one() + two()
is_zero(z - three())
