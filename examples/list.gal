fn list(acc, f) {
  acc = f(acc, 0)
  acc = f(acc, 1)
  acc = f(acc, 2)
  acc
}

fn list_id(l) {
  fn ret(acc, f) {
    fn foreach(accprime, x) {
      accprime = f(accprime, x)
      accprime
    }
    acc = l(acc, foreach)
    acc
  }
  ret
}

fn push_back(tail, head) {
  fn ret(acc, f) {
    acc = tail(acc, f)
    acc = f(acc, head)
    acc
  }
  ret
}

l2 = list_id(list)
push_back(l2, 3)

/* this just prints `Result: function ret (acc, f) { { acc = tail(acc, f); acc = f(acc, head); acc } }`
   we something to "consume" the value (i.e. an effect). currently we do not have a way of doing this.
   we need a `general` way to communicate with the outside world. */
